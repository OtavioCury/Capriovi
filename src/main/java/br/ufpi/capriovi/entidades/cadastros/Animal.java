package br.ufpi.capriovi.entidades.cadastros;import java.io.Serializable;import java.util.ArrayList;import java.util.Calendar;import java.util.Date;import java.util.GregorianCalendar;import java.util.List;import javax.persistence.CascadeType;import javax.persistence.Column;import javax.persistence.ConstraintMode;import javax.persistence.Entity;import javax.persistence.FetchType;import javax.persistence.ForeignKey;import javax.persistence.GeneratedValue;import javax.persistence.GenerationType;import javax.persistence.Id;import javax.persistence.JoinColumn;import javax.persistence.JoinTable;import javax.persistence.ManyToMany;import javax.persistence.ManyToOne;import javax.persistence.OneToMany;import javax.persistence.Table;import javax.persistence.Temporal;import javax.persistence.TemporalType;import javax.persistence.Transient;import org.hibernate.annotations.LazyCollection;import org.hibernate.annotations.LazyCollectionOption;import org.joda.time.DateTime;import org.joda.time.Days;import com.fasterxml.jackson.annotation.JsonIgnore;import br.ufpi.capriovi.entidades.controleAnimal.Carcaca;import br.ufpi.capriovi.entidades.controleAnimal.ControleParasita;import br.ufpi.capriovi.entidades.controleAnimal.DesenvolvimentoPonderal;import br.ufpi.capriovi.entidades.controleAnimal.ManejoReprodutivo;import br.ufpi.capriovi.entidades.controleAnimal.MovimentacaoAnimal;import br.ufpi.capriovi.entidades.controleAnimal.OcorrenciaClinica;import br.ufpi.capriovi.entidades.controleAnimal.TamanhoCorporal;import br.ufpi.capriovi.entidades.controleAnimal.Vacinacao;import br.ufpi.capriovi.entidades.controleAnimal.Verminose;import br.ufpi.capriovi.entidades.relatorio.RelatorioVermifugação;import br.ufpi.capriovi.suporte.tiposEnum.TipoCategoriaEnum;import br.ufpi.capriovi.suporte.tiposEnum.TipoCompGeneticaEnum;import br.ufpi.capriovi.suporte.tiposEnum.TipoDesenvolvimentoPonderal;import br.ufpi.capriovi.suporte.tiposEnum.TipoEstacaoEnum;import br.ufpi.capriovi.suporte.tiposEnum.TipoFinalidadeAnimalEnum;import br.ufpi.capriovi.suporte.tiposEnum.TipoMotivoEntradaEnum;import br.ufpi.capriovi.suporte.tiposEnum.TipoOrelhaEnum;import br.ufpi.capriovi.suporte.tiposEnum.TipoParticaoEnum;import br.ufpi.capriovi.suporte.tiposEnum.TipoPartoEnum;import br.ufpi.capriovi.suporte.tiposEnum.TipoSexoEnum;import br.ufpi.capriovi.suporte.tiposEnum.TipoStatusEnum;@Entity@Table(name = "animal")public class Animal implements Serializable {	private static final long serialVersionUID = 3230592327604769991L;	@Id	@GeneratedValue(strategy = GenerationType.IDENTITY)	private Long id;			@ManyToOne(cascade = { CascadeType.MERGE, CascadeType.REFRESH })	@JoinColumn(name = "id_rebanho")	private Rebanho rebanho;	private String nomeNumero;	private String codigo;	private String grupo;	@ManyToOne(cascade = CascadeType.REFRESH)	@JoinColumn(name = "id_pai")	private Animal pai;	@ManyToOne(cascade = CascadeType.REFRESH)	@JoinColumn(name = "id_mae")	private Animal mae;	@ManyToOne(cascade = {CascadeType.MERGE, CascadeType.REFRESH})	@JoinColumn(name = "id_raca")	private Raca raca;	private Boolean tipoBarba;	private Boolean tipoBrinco;	private Boolean tipoCorno;	private Boolean tetasSupranumerarias;			@Temporal(value = TemporalType.DATE)	private Date nascimento;	@Temporal(value = TemporalType.DATE)	private Date dataEntrada;	@Column(name = "tipo_sexo")	private TipoSexoEnum sexo;	@Column(name = "tipo_finalidade")	private TipoFinalidadeAnimalEnum finalidadeAnimal;	@Column(name = "tipo_composicao")	private TipoCompGeneticaEnum composicaoGenetica;	@Column(name = "tipo_parto")	private TipoPartoEnum parto;	@Column(name = "tipo_status")	private TipoStatusEnum status;	@Column(name = "tipo_particao")	private TipoParticaoEnum particao;	@Column(name = "tipo_orelha")	private TipoOrelhaEnum orelha;		@Column(name = "motivoEntrada")	private TipoMotivoEntradaEnum motivoEntrada;	@Column(name = "tipo_categoria")	private TipoCategoriaEnum categoria;	@Transient	private double mediaGrupo;	@Transient	private double pesoCorrigido;	@Transient	private Double diferencialEsperado;	@Transient	private double intervaloGeracao;	@Transient	private int idadeAtualAnos;	@Transient	private double endogamia;	@Transient	private Double[] linhaMatrizA;	@Transient	private int posAnt;	@Transient	private int posAtual;	@Transient	private double ganhoGenetico;	@Transient	private Double pesoAjustado;	@Transient	private Double indice;	@Transient	private ArrayList<Animal> filhos;	@Transient	private Double notaCasalIndice;	@Transient	private Double mediaVermifugacao;	@Transient	private int grupoContemporaneo;	// a serem retirados	private Double ipp, ptcn, ptcd;	private Double peso120;	@OneToMany(mappedBy = "animal", cascade = CascadeType.ALL)	private List<RelatorioVermifugação> listaNotas;	@JsonIgnore	@LazyCollection(LazyCollectionOption.FALSE)	@OneToMany(mappedBy = "animal", cascade = CascadeType.ALL, orphanRemoval = true)	private List<DesenvolvimentoPonderal> desenvolvimentoPonderal;	@JsonIgnore	@LazyCollection(LazyCollectionOption.FALSE)	@OneToMany(mappedBy = "animal", cascade = CascadeType.ALL, orphanRemoval = true)	private List<Verminose> verminose;	@JsonIgnore	@LazyCollection(LazyCollectionOption.FALSE)	@OneToMany(mappedBy = "animal", cascade = CascadeType.ALL, orphanRemoval = true)	private List<TamanhoCorporal> tamanhoCorporal;	@JsonIgnore	@LazyCollection(LazyCollectionOption.FALSE)	@OneToMany(mappedBy = "animal", cascade = CascadeType.ALL, orphanRemoval = true)	private List<Carcaca> carcaca;		@JsonIgnore	@OneToMany(mappedBy = "reprodutor", cascade = CascadeType.REMOVE, fetch = FetchType.LAZY)	private List<ManejoReprodutivo> manejoReprodutivo;	@JsonIgnore	@OneToMany(mappedBy = "matriz", cascade = CascadeType.REMOVE, fetch = FetchType.LAZY)	private List<ManejoReprodutivo> manejoReprodutivoMatriz;	@JsonIgnore	@OneToMany(mappedBy = "animal", cascade = CascadeType.REMOVE, fetch = FetchType.LAZY)	private List<ControleParasita> controleParazita;	@JsonIgnore	@OneToMany(mappedBy = "animal", cascade = CascadeType.REMOVE, fetch = FetchType.LAZY)	private List<MovimentacaoAnimal> movimentacaoAnimal;	@JsonIgnore	@OneToMany(mappedBy = "animal", cascade = CascadeType.REMOVE, fetch = FetchType.LAZY)	private List<OcorrenciaClinica> ocorrenciaClinica;	@JsonIgnore	@ManyToMany(fetch = FetchType.LAZY,	cascade ={	                		CascadeType.MERGE,		CascadeType.REFRESH	                },targetEntity = Vacinacao.class)	@JoinTable(name = "animal_vacinacao",	inverseJoinColumns = @JoinColumn(name = "animal_id",	nullable = false,	updatable = false),	joinColumns = @JoinColumn(name = "vacinacao_id",	nullable = false,	updatable = false),	foreignKey = @ForeignKey(ConstraintMode.CONSTRAINT),	inverseForeignKey = @ForeignKey(ConstraintMode.CONSTRAINT))	private List<Vacinacao> vacinacao;	public Animal(Rebanho rebanho, String nomeNumero, Animal pai, Animal mae, TipoSexoEnum sexo, Date nascimento, TipoPartoEnum parto) {		super();		this.rebanho = rebanho;		this.nomeNumero = nomeNumero;		this.pai = pai;		this.mae = mae;		this.sexo = sexo;		this.nascimento = nascimento;		this.parto = parto;		status = TipoStatusEnum.getEnumByCodigo(1);	}	public Animal(Double diferencialEsperado, double ganhoGenetico, double endogamia) {		this.diferencialEsperado = diferencialEsperado;		this.ganhoGenetico = ganhoGenetico;		this.endogamia = endogamia;	}	public Animal(double indice, double endogamia) {		this.indice = indice;		this.endogamia = endogamia;	}	public Animal() {		super();		rebanho = new Rebanho();		this.desenvolvimentoPonderal = new ArrayList<DesenvolvimentoPonderal>();		this.verminose = new ArrayList<Verminose>();		this.tamanhoCorporal = new ArrayList<TamanhoCorporal>();		this.carcaca = new ArrayList<Carcaca>();		//this.controleLeiteiro = new HashSet<ControleLeiteiro>();		this.manejoReprodutivo = new ArrayList<ManejoReprodutivo>();		this.manejoReprodutivoMatriz = new ArrayList<ManejoReprodutivo>();		this.movimentacaoAnimal = new ArrayList<MovimentacaoAnimal>();		this.controleParazita = new ArrayList<ControleParasita>();				this.ocorrenciaClinica = new ArrayList<OcorrenciaClinica>();		this.raca = new Raca();		this.status = TipoStatusEnum.STATUS_ATIVO;		this.listaNotas = new ArrayList<RelatorioVermifugação>();	}	public List<Vacinacao> getVacinacao() {		return vacinacao;	}	public void setVacinacao(List<Vacinacao> vacinacao) {		this.vacinacao = vacinacao;	}	public Long getId() {		return id;	}	public void setId(Long id) {		this.id = id;	}	public Rebanho getRebanho() {		return rebanho;	}	public void setRebanho(Rebanho rebanho) {		this.rebanho = rebanho;	}	public String getNomeNumero() {		return nomeNumero;	}	public void setNomeNumero(String nomeNumero) {		this.nomeNumero = nomeNumero;	}	public String getCodigo() {		return codigo;	}	public void setCodigo(String codigo) {		this.codigo = codigo;	}	public Animal getPai() {		return pai;	}	public void setPai(Animal pai) {		this.pai = pai;	}	public Animal getMae() {		return mae;	}	public void setMae(Animal mae) {		this.mae = mae;	}	public TipoSexoEnum getSexo() {		return sexo;	}	public void setSexo(TipoSexoEnum sexo) {		this.sexo = sexo;	}	public Integer getTipoSexo() {		if (sexo != null)			return sexo.getCodigo();		return -1;	}	public void setTipoSexo(Integer codigo) {		this.sexo = TipoSexoEnum.getEnumByCodigo(codigo);	}	public Boolean getTipoBarba() {		return tipoBarba;	}	public void setTipoBarba(Boolean tipoBarba) {		this.tipoBarba = tipoBarba;	}	public Boolean getTipoBrinco() {		return tipoBrinco;	}	public void setTipoBrinco(Boolean tipoBrinco) {		this.tipoBrinco = tipoBrinco;	}	public Boolean getTipoCorno() {		return tipoCorno;	}	public void setTipoCorno(Boolean tipoCorno) {		this.tipoCorno = tipoCorno;	}	@JsonIgnore	public GregorianCalendar getNascimentoGC() {		GregorianCalendar gc = new GregorianCalendar();		if (nascimento != null) {			gc.setTime(nascimento);		}				return gc;	}	public void setIdadeAtualAnos(int idadeAtualAnos) {		this.idadeAtualAnos = idadeAtualAnos;	}	public int getIdadeAtualAnos() { // set?		return idadeAtualAnos;	}	public Date getNascimento() {		return nascimento;	}	public void setNascimento(Date nascimento) {		this.nascimento = nascimento;	}	public Date getDataEntrada() {		return dataEntrada;	}	public void setDataEntrada(Date dataEntrada) {		this.dataEntrada = dataEntrada;	}	public TipoFinalidadeAnimalEnum getFinalidadeAnimal() {		return finalidadeAnimal;	}	public void setFinalidadeAnimal(TipoFinalidadeAnimalEnum finalidadeAnimal) {		this.finalidadeAnimal = finalidadeAnimal;	}	public void setTipoFinalidade(Integer codigo) {		this.finalidadeAnimal = TipoFinalidadeAnimalEnum.getEnumByCodigo(codigo);	}	public TipoCompGeneticaEnum getComposicaoGenetica() {		return composicaoGenetica;	}	public void setComposicaoGenetica(TipoCompGeneticaEnum composicaoGenetica) {		this.composicaoGenetica = composicaoGenetica;	}	public void setTipoComposicao(Integer codigo) {		this.composicaoGenetica = TipoCompGeneticaEnum.getEnumByCodigo(codigo);	}	public TipoPartoEnum getParto() {		return parto;	}	public void setParto(TipoPartoEnum parto) {		this.parto = parto;	}	public Integer getTipoParto() {		if (parto != null)			return parto.getCodigo();		return -1;	}	public void setTipoParto(Integer codigo) {		this.parto = TipoPartoEnum.getEnumByCodigo(codigo);	}	public TipoStatusEnum getStatus() {		return status;	}	public void setStatus(TipoStatusEnum status) {		this.status = status;	}	public Integer getTipoStatus() {		if (status != null)			return status.getCodigo();		return -1;	}	public void setTipoStatus(Integer codigo) {		this.status = TipoStatusEnum.getEnumByCodigo(codigo);	}	public String getGrupo() {		return grupo;	}	public void setGrupo(String grupo) {		this.grupo = grupo;	}	public double getPesoCorrigido() {		return pesoCorrigido;	}	public void setPesoCorrigido(double pesoCorrigido) {		this.pesoCorrigido = pesoCorrigido;	}	public Double getDiferencialEsperado() {		return diferencialEsperado;	}	public void setDiferencialEsperado(Double diferencialEsperadoProgenie) {		this.diferencialEsperado = diferencialEsperadoProgenie;	}	public double getIntervaloGeracao() {		return intervaloGeracao;	}	public void setIntervaloGeracao(double intervaloGeracao) {		this.intervaloGeracao = intervaloGeracao;	}	public List<Carcaca> getCarcaca() {		return carcaca;	}	public void setCarcaca(List<Carcaca> carcaca) {		this.carcaca = carcaca;	}		public List<ControleParasita> getControleParazita() {		return controleParazita;	}	public List<ManejoReprodutivo> getManejoReprodutivo() {		return manejoReprodutivo;	}	public void setManejoReprodutivo(List<ManejoReprodutivo> manejoReprodutivo) {		this.manejoReprodutivo = manejoReprodutivo;	}	public void setControleParazita(List<ControleParasita> controleParazita) {		this.controleParazita = controleParazita;	}	public List<MovimentacaoAnimal> getMovimentacaoAnimal() {		return movimentacaoAnimal;	}	public void setMovimentacaoAnimal(List<MovimentacaoAnimal> movimentacaoAnimal) {		this.movimentacaoAnimal = movimentacaoAnimal;	}	public List<OcorrenciaClinica> getOcorrenciaClinica() {		return ocorrenciaClinica;	}	public void setOcorrenciaClinica(List<OcorrenciaClinica> ocorrenciaClinica) {		this.ocorrenciaClinica = ocorrenciaClinica;	}	public double getEndogamia() {		return endogamia;	}	public void setEndogamia(double endogamia) {		this.endogamia = endogamia;	}	public Double[] getLinhaMatrizA() {		return linhaMatrizA;	}	public void setLinhaMatrizA(Double[] linhaMatrizA) {		this.linhaMatrizA = linhaMatrizA;	}	public int getPosAnt() {		return posAnt;	}	public void setPosAnt(int posAnt) {		this.posAnt = posAnt;	}	public int getPosAtual() {		return posAtual;	}	public void setPosAtual(int posAtual) {		this.posAtual = posAtual;	}	public double getGanhoGenetico() {		return ganhoGenetico;	}	public void setGanhoGenetico(double ganhoGenetico) {		this.ganhoGenetico = ganhoGenetico;	}	public double getMediaGrupo() {		return mediaGrupo;	}	public void setMediaGrupo(double mediaGrupo) {		this.mediaGrupo = mediaGrupo;	}	@Override	public int hashCode() {		final int prime = 31;		int result = 1;		result = prime * result + ((id == null) ? 0 : id.hashCode());		return result;	}	@Override	public boolean equals(Object obj) {		if (this == obj)			return true;		if (obj == null)			return false;		if (getClass() != obj.getClass())			return false;		Animal other = (Animal) obj;		if (id == null) {			if (other.id != null)				return false;		} else if (!id.equals(other.id))			return false;		return true;	}	public Raca getRaca() {		return raca;	}	public void setRaca(Raca raca) {		this.raca = raca;	}	public TipoMotivoEntradaEnum getMotivoEntrada() {		return motivoEntrada;	}	public void setMotivoEntrada(TipoMotivoEntradaEnum motivoEntrada) {		this.motivoEntrada = motivoEntrada;	}	public TipoCategoriaEnum getCategoria() {		return categoria;	}	public void setCategoria(TipoCategoriaEnum categoria) {		this.categoria = categoria;	}	public List<DesenvolvimentoPonderal> getDesenvolvimentoPonderal() {		return desenvolvimentoPonderal;	}	public void setDesenvolvimentoPonderal(List<DesenvolvimentoPonderal> desenvolvimentoPonderal) {		this.desenvolvimentoPonderal = desenvolvimentoPonderal;	}	public List<Verminose> getVerminose() {		return verminose;	}	public void setVerminose(List<Verminose> verminose) {		this.verminose = verminose;	}	public List<TamanhoCorporal> getTamanhoCorporal() {		return tamanhoCorporal;	}	public void setTamanhoCorporal(List<TamanhoCorporal> tamanhoCorporal) {		this.tamanhoCorporal = tamanhoCorporal;	}	public Boolean getTetasSupranumerarias() {		return tetasSupranumerarias;	}	public void setTetasSupranumerarias(Boolean tetasSupranumerarias) {		this.tetasSupranumerarias = tetasSupranumerarias;	}	public TipoParticaoEnum getParticao() {		return particao;	}	public void setParticao(TipoParticaoEnum particao) {		this.particao = particao;	}	public TipoOrelhaEnum getOrelha() {		return orelha;	}	@JsonIgnore	public Integer getTipoOrelha() {		if (orelha != null)			return orelha.getCodigo();		return null;	}	public void setOrelha(TipoOrelhaEnum orelha) {		this.orelha = orelha;	}	public List<ManejoReprodutivo> getManejoReprodutivoMatriz() {		return manejoReprodutivoMatriz;	}	public void setManejoReprodutivoMatriz(List<ManejoReprodutivo> manejoReprodutivoMatriz) {		this.manejoReprodutivoMatriz = manejoReprodutivoMatriz;	}	public List<RelatorioVermifugação> getListaNotas() {		return listaNotas;	}	public void setListaNotas(List<RelatorioVermifugação> listaNotas) {		this.listaNotas = listaNotas;	}	public Double getIndice() {		return indice;	}	public void setIndice(Double indice) {		this.indice = indice;	}	public ArrayList<Animal> getFilhos() {		return filhos;	}	public void setFilhos(ArrayList<Animal> filhos) {		this.filhos = filhos;	}	public Double getNotaCasalIndice() {		return notaCasalIndice;	}	public void setNotaCasalIndice(Double notaCasalIndice) {		this.notaCasalIndice = notaCasalIndice;	}	public Double getPesoAjustado() {		return pesoAjustado;	}	public void setPesoAjustado(Double pesoAjustado) {		this.pesoAjustado = pesoAjustado;	}	public Double getMediaVermifugacao() {		return mediaVermifugacao;	}	public void setMediaVermifugacao(Double mediaVermifugacao) {		this.mediaVermifugacao = mediaVermifugacao;	}	public Double getIpp() {		return ipp;	}	public void setIpp(Double ipp) {		this.ipp = ipp;	}	public Double getPtcn() {		return ptcn;	}	public void setPtcn(Double ptcn) {		this.ptcn = ptcn;	}	public Double getPtcd() {		return ptcd;	}	public void setPtcd(Double ptcd) {		this.ptcd = ptcd;	}	public Double getPeso120() {		return peso120;	}	public void setPeso120(Double peso120) {		this.peso120 = peso120;	}	public int getGrupoContemporaneo() {		return grupoContemporaneo;	}	public void setGrupoContemporaneo(int grupoContemporaneo) {		this.grupoContemporaneo = grupoContemporaneo;	}	/**	 * Retorna estação de nascimento do animal	 * @return	 */	public TipoEstacaoEnum estacao(){		Calendar cal = Calendar.getInstance();		cal.setTime(getNascimento());		int estacao = cal.get(Calendar.MONTH);		if (estacao >= 0 && estacao <= 5) {			return TipoEstacaoEnum.getEnumByCodigo(1);		}else{			return TipoEstacaoEnum.getEnumByCodigo(2);		}	}	public Double getPesoInterpolado(Integer diasPesagem) {		ArrayList<DesenvolvimentoPonderal> desenvPond = new ArrayList<DesenvolvimentoPonderal>(				this.getDesenvolvimentoPonderal());		Double peso = null;		if (desenvPond.size() > 0) {			peso = desenvPond.get(desenvPond.size() - 1).getPeso().doubleValue();			int dias = Days.daysBetween(new DateTime(this.getNascimento()),					new DateTime(desenvPond.get(desenvPond.size() - 1).getData().getTime())).getDays();			peso = peso / dias;			return peso * diasPesagem;		}		return peso;	}	/**	 * 	 * @return	 * 	 */	public Double AjustaPeso60D() {		List<DesenvolvimentoPonderal> desenvPond = this.getDesenvolvimentoPonderal();		int quantPesos = desenvPond.size();		int diasAntDesm = 0, diasPosDesm = 0, idadeDesm = 0, idadeAux = 0;		if (quantPesos >= 2) {			for (int i = 0; i < quantPesos; i++) {				if (desenvPond.get(i).getPeso() != null) {					if (desenvPond.get(i).getTipoDesenvolvimento().getCodigo() == 2) {						// então ainda ha peso a frente						idadeDesm = Days.daysBetween(new DateTime(this.getNascimento()),								new DateTime(desenvPond.get(i).getData())).getDays();						if (i < quantPesos - 1) {							diasAntDesm = Days.daysBetween(new DateTime(desenvPond.get(i - 1).getData()),									new DateTime(desenvPond.get(i).getData())).getDays();							diasPosDesm = Days.daysBetween(new DateTime(desenvPond.get(i).getData()),									new DateTime(desenvPond.get(i + 1).getData())).getDays();							if (diasPosDesm <= diasAntDesm) {// 3 formula								// idade posterior a desmame								idadeAux = Days.daysBetween(new DateTime(this.getNascimento()),										new DateTime(desenvPond.get(i + 1).getData())).getDays();								return (desenvPond.get(i).getPeso()										- ((desenvPond.get(i + 1).getPeso() - desenvPond.get(i).getPeso())												/ (idadeAux - idadeDesm)) * (idadeAux - 60));							} else {								if (idadeDesm < 60) {// peso desmame for antes									// dos 60 dias									// idade do peso anterior									idadeAux = Days.daysBetween(new DateTime(this.getNascimento()),											new DateTime(desenvPond.get(i - 1).getData())).getDays();									return (desenvPond.get(i).getPeso()											+ ((desenvPond.get(i).getPeso() - desenvPond.get(i - 1).getPeso())													/ (idadeDesm - idadeAux)) * (60 - idadeDesm));								} else {// peso desmame for depois dos 60 dias									// idade do peso anterior									idadeAux = Days.daysBetween(new DateTime(this.getNascimento()),											new DateTime(desenvPond.get(i - 1).getData())).getDays();									return (desenvPond.get(i).getPeso()											- ((desenvPond.get(i).getPeso() - desenvPond.get(i - 1).getPeso())													/ (idadeDesm - idadeAux)) * (idadeDesm - 60));								}							}						} else {							// peso de desmame é o ultimo da lista							if (idadeDesm < 60) {// peso desmame for antes dos								// 60 dias								// idade do peso anterior								idadeAux = Days.daysBetween(new DateTime(this.getNascimento()),										new DateTime(desenvPond.get(i - 1).getData())).getDays();								return (desenvPond.get(i).getPeso()										+ ((desenvPond.get(i).getPeso() - desenvPond.get(i - 1).getPeso())												/ (idadeDesm - idadeAux)) * (60 - idadeDesm));							} else {// peso desmame for depois dos 60 dias								// idade do peso anterior								idadeAux = Days.daysBetween(new DateTime(this.getNascimento()),										new DateTime(desenvPond.get(i - 1).getData())).getDays();								return (desenvPond.get(i).getPeso()										- ((desenvPond.get(i).getPeso() - desenvPond.get(i - 1).getPeso())												/ (idadeDesm - idadeAux)) * (idadeDesm - 60));							}						}					}				}			}			// sem peso ao desmame			return -1.0;		}		// não tem pesos suficientes para realizar o calculo		return -2.0;	}	public Double AjustaPeso120D() {		List<DesenvolvimentoPonderal> desenvPond = this.getDesenvolvimentoPonderal();		int quantPesos = desenvPond.size();		int idadeAnt120D = 0, idadePos120D = 0, ind120D = 0, indDesm = 0;		int flag = 0, idadeFinal = 0;		if (quantPesos >= 2) {			for (int i = 0; i < quantPesos; i++) {				if (desenvPond.get(i).getPeso() != null) {					if (desenvPond.get(i).getTipoDesenvolvimento().getCodigo() == 2) {						indDesm = i;						flag++;					}					idadePos120D = Days							.daysBetween(new DateTime(this.getNascimento()), new DateTime(desenvPond.get(i).getData()))							.getDays();					if (idadePos120D >= 120) {						if (idadePos120D == 120) {							ind120D = i;							idadeFinal = idadePos120D;							flag++;						} else {							if (i != 0) {								idadeAnt120D = Days.daysBetween(new DateTime(this.getNascimento()),										new DateTime(desenvPond.get(i - 1).getData())).getDays();								if ((idadePos120D - 120) <= (120 - idadeAnt120D)) {									ind120D = i;									idadeFinal = idadePos120D;									flag++;								} else {									ind120D = i - 1;									idadeFinal = idadeAnt120D;									flag++;								}							}						}					}					if (flag == 2) {						if (idadeFinal < 120) {							return (desenvPond.get(ind120D).getPeso()									+ ((desenvPond.get(ind120D).getPeso() - desenvPond.get(indDesm).getPeso())											/ idadeFinal) * (120 - idadeFinal));						} else {							return (desenvPond.get(ind120D).getPeso()									- ((desenvPond.get(ind120D).getPeso() - desenvPond.get(indDesm).getPeso())											/ idadeFinal) * (idadeFinal - 120));						}					}				}			}		}		// não tem pesos suficientes para realizar o calculo		return -2.0;	}	public Double AjustaPeso180D() {		List<DesenvolvimentoPonderal> desenvPond = this.getDesenvolvimentoPonderal();		int quantPesos = desenvPond.size();		int idadeAnt180D = 0, idadePos180D = 0, ind180D = 0, indDesm = 0;		int flag = 0, idadeFinal = 0;		if (quantPesos >= 2) {			for (int i = 0; i < quantPesos; i++) {				if (desenvPond.get(i).getPeso() != null) {					if (desenvPond.get(i).getTipoDesenvolvimento().getCodigo() == 2) {						indDesm = i;						flag++;					}					idadePos180D = Days							.daysBetween(new DateTime(this.getNascimento()), new DateTime(desenvPond.get(i).getData()))							.getDays();					if (idadePos180D >= 180) {						if (idadePos180D == 180) {							ind180D = i;							idadeFinal = idadePos180D;							flag++;						} else {							if (i != 0) {								idadeAnt180D = Days.daysBetween(new DateTime(this.getNascimento()),										new DateTime(desenvPond.get(i - 1).getData())).getDays();								if ((idadePos180D - 180) <= (180 - idadeAnt180D)) {									ind180D = i;									idadeFinal = idadePos180D;									flag++;								} else {									ind180D = i - 1;									idadeFinal = idadeAnt180D;									flag++;								}							}						}					}					if (flag == 2) {						if (idadeFinal < 180) {							return (desenvPond.get(ind180D).getPeso()									+ ((desenvPond.get(ind180D).getPeso() - desenvPond.get(indDesm).getPeso())											/ idadeFinal) * (180 - idadeFinal));						} else {							return (desenvPond.get(ind180D).getPeso()									- ((desenvPond.get(ind180D).getPeso() - desenvPond.get(indDesm).getPeso())											/ idadeFinal) * (idadeFinal - 180));						}					}				}			}		}		// não tem pesos suficientes para realizar o calculo		return -2.0;	}	/**	 * Ajuste de pesos 	 * @param dias	 * @return	 */	public Double ajuste(int dias){		System.out.println("Data de nascimento: "+getNascimento());		if (getDesenvolvimentoPonderal().size() > 0) {			DesenvolvimentoPonderal desmama = null;			for (DesenvolvimentoPonderal dp : getDesenvolvimentoPonderal()) {				if (dp.getTipoDesenvolvimento().equals(TipoDesenvolvimentoPonderal.getEnumByCodigo(2))) {					desmama = dp;					System.out.println("Data de desmama e peso: "+desmama.getData()+" "+desmama.getPeso());				}			}			if (desmama != null) {				int menor = Math.abs(dias - Days.daysBetween(new DateTime(getNascimento()), 						new DateTime(getDesenvolvimentoPonderal().get(0).getData())).getDays()); 				int index = 0;				if (getDesenvolvimentoPonderal().size() >= 2) {					for (int i = 1; i < getDesenvolvimentoPonderal().size(); i++) {						if (Math.abs(dias - Days.daysBetween(new DateTime(getNascimento()), 								new DateTime(getDesenvolvimentoPonderal().get(i).getData())).getDays()) < menor) {							menor = Math.abs(dias - Days.daysBetween(new DateTime(getNascimento()), 									new DateTime(getDesenvolvimentoPonderal().get(i).getData())).getDays());							index = i;						}					}				}				int idadeMaisProxima = Days.daysBetween(new DateTime(getNascimento()), 						new DateTime(getDesenvolvimentoPonderal().get(index).getData())).getDays();				System.out.println("Data e Idade mais próxima: "+getDesenvolvimentoPonderal().get(index).getData()						+ " "+idadeMaisProxima);				Double pesoMaisProximo = getDesenvolvimentoPonderal().get(index).getPeso();				System.out.println("Peso mais próximo: "+pesoMaisProximo);				Double pesoDesmame = desmama.getPeso();					if ((dias - idadeMaisProxima) > 0) {					//antes dos 120 dias					pesoAjustado = pesoMaisProximo + (((pesoMaisProximo - pesoDesmame)/idadeMaisProxima)							* (dias - idadeMaisProxima)); 				}else{					//depois dos 120 dias					pesoAjustado = pesoMaisProximo - (((pesoMaisProximo - pesoDesmame)/idadeMaisProxima)							* (idadeMaisProxima - dias));				}				System.out.println("Peso ajustado :"+pesoAjustado);				return pesoAjustado;			}else{				return null;			}		}else{			return null;		}	}	/**	 * Retorna ano de nascimento de animal	 * @return	 */	public int anoNascimento(){		Calendar cal = Calendar.getInstance();		cal.setTime(getNascimento());		return cal.get(Calendar.YEAR);	}}