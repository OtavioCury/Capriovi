package br.ufpi.capriovi.entidades.cadastros;import java.io.Serializable;import java.util.ArrayList;import java.util.Date;import java.util.HashSet;import java.util.List;import java.util.Set;import javax.persistence.CascadeType;import javax.persistence.Column;import javax.persistence.Entity;import javax.persistence.GeneratedValue;import javax.persistence.GenerationType;import javax.persistence.Id;import javax.persistence.JoinColumn;import javax.persistence.ManyToOne;import javax.persistence.OneToMany;import javax.persistence.Table;import javax.persistence.Temporal;import javax.persistence.TemporalType;import javax.persistence.Transient;import com.fasterxml.jackson.annotation.JsonIgnore;import br.ufpi.capriovi.entidades.controleAnimal.ControleParasita;import br.ufpi.capriovi.entidades.controleAnimal.ManejoReprodutivo;import br.ufpi.capriovi.entidades.controleAnimal.MovimentacaoAnimal;import br.ufpi.capriovi.entidades.controleAnimal.OcorrenciaClinica;import br.ufpi.capriovi.suporte.tiposEnum.TipoCriacaoEnum;import br.ufpi.capriovi.suporte.tiposEnum.TipoFinalidadeRebanhoEnum;import br.ufpi.capriovi.suporte.tiposEnum.TipoManejoEnum;@Entity@Table(name = "rebanho")public class Rebanho implements Serializable {	private static final long serialVersionUID = 2881306346356819050L;	@Id	@GeneratedValue(strategy = GenerationType.IDENTITY)	private Long id;	private String codigo;	private String nome;	@Column(name = "tipo_criacao")	private TipoCriacaoEnum criacao;	@Column(name = "tipo_manejo")	private TipoManejoEnum manejo;	@Column(name = "tipo_finalidade")	private TipoFinalidadeRebanhoEnum finalidade;		@ManyToOne(cascade = CascadeType.REFRESH)	@JoinColumn(name = "id_fazenda")	private Fazenda fazenda;	@JsonIgnore	@OneToMany(mappedBy = "rebanho", cascade = CascadeType.REMOVE)	private List<Animal> animais;	@JsonIgnore	@OneToMany(mappedBy = "rebanho", cascade = CascadeType.REMOVE)	private Set<ManejoReprodutivo> manejoReprodutivo;	@JsonIgnore	@OneToMany(mappedBy = "rebanho", cascade = CascadeType.REMOVE)	private Set<MovimentacaoAnimal> movimentacaoAnimal;	@JsonIgnore	@OneToMany(mappedBy = "rebanho", cascade = CascadeType.REMOVE)	private Set<ControleParasita> controle;	@JsonIgnore	@OneToMany(mappedBy = "rebanho", cascade = CascadeType.REMOVE)	private Set<OcorrenciaClinica> ocorrencias;	@Temporal(value = TemporalType.DATE)	private Date registro;	@Transient	private double tamanhoEfetivo; //número efetivo (relatório genetico - tamanho efetivo da população)	public Rebanho() {		this.fazenda = new Fazenda();		this.animais = new ArrayList<Animal>();		this.manejoReprodutivo = new HashSet<ManejoReprodutivo>();		this.movimentacaoAnimal = new HashSet<MovimentacaoAnimal>();		this.ocorrencias = new HashSet<OcorrenciaClinica>();	}	public Set<ManejoReprodutivo> getManejoReprodutivo() {		return manejoReprodutivo;	}	public void setManejoReprodutivo(Set<ManejoReprodutivo> manejoReprodutivo) {		this.manejoReprodutivo = manejoReprodutivo;	}	public Long getId() {		return id;	}	public void setFinalidade(TipoFinalidadeRebanhoEnum finalidade) {		this.finalidade = finalidade;	}	public void setId(Long id) {		this.id = id;	}	public String getCodigo() {		return codigo;	}	public void setCodigo(String codigo) {		this.codigo = codigo;	}	public String getNome() {		return nome;	}	public void setNome(String nome) {		this.nome = nome;	}	public TipoCriacaoEnum getCriacao() {		return criacao;	}	public Set<MovimentacaoAnimal> getMovimentacaoAnimal() {		return movimentacaoAnimal;	}	public void setMovimentacaoAnimal(Set<MovimentacaoAnimal> movimentacaoAnimal) {		this.movimentacaoAnimal = movimentacaoAnimal;	}	public Set<ControleParasita> getControle() {		return controle;	}	public void setControle(Set<ControleParasita> controle) {		this.controle = controle;	}	public Set<OcorrenciaClinica> getOcorrencias() {		return ocorrencias;	}	public void setOcorrencias(Set<OcorrenciaClinica> ocorrencias) {		this.ocorrencias = ocorrencias;	}	public void setCriacao(TipoCriacaoEnum criacao) {		this.criacao = criacao;	}	public Integer getTipoCriacao() {		if (criacao != null)			return criacao.getCodigo();		return -1;	}	public void setTipoCriacao(Integer codigo) {		this.criacao = TipoCriacaoEnum.getEnumByCodigo(codigo);	}	public TipoManejoEnum getManejo() {		return manejo;	}	public void setManejo(TipoManejoEnum manejo) {		this.manejo = manejo;	}	public Integer getTipoManejo() {		if (manejo != null)			return manejo.getCodigo();		return -1;	}	public TipoManejoEnum obterManejo() {		return manejo;	}	public void setTipoManejo(Integer codigo) {		this.manejo = TipoManejoEnum.getEnumByCodigo(codigo);	}	public Integer getTipoFinalidade() {		if (finalidade != null)			return finalidade.getCodigo();		return -1;	}	public TipoFinalidadeRebanhoEnum getFinalidade() {		return finalidade;	}	public void setTipoFinalidade(Integer codigo) {		this.finalidade = TipoFinalidadeRebanhoEnum.getEnumByCodigo(codigo);	}	public Fazenda getFazenda() {		return fazenda;	}	public void setFazenda(Fazenda fazenda) {		this.fazenda = fazenda;	}	public List<Animal> getAnimais() {		return animais;	}	public void setAnimais(List<Animal> animais) {		this.animais = animais;	}	public Date getRegistro() {		return registro;	}	public void setRegistro(Date registro) {		this.registro = registro;	}	@Override	public int hashCode() {		final int prime = 31;		int result = 1;		result = prime * result + ((id == null) ? 0 : id.hashCode());		return result;	}	@Override	public boolean equals(Object obj) {		if (this == obj)			return true;		if (obj == null)			return false;		if (getClass() != obj.getClass())			return false;		Rebanho other = (Rebanho) obj;		if (id == null) {			if (other.id != null)				return false;		} else if (!id.equals(other.id))			return false;		return true;	}	public double getTamanhoEfetivo() {		return tamanhoEfetivo;	}	public void setTamanhoEfetivo(double tamanhoEfetivo) {		this.tamanhoEfetivo = tamanhoEfetivo;	}}